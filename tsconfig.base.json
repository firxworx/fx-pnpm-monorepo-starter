{
  "$schema": "https://json.schemastore.org/tsconfig",
  "compilerOptions": {
    "strict": true,
    "strictNullChecks": true,
    "strictBindCallApply": true,
    "noImplicitAny": true,
    "target": "ESNext",
    "module": "ESNext",
    "declaration": true,
    "declarationMap": true,
    "sourceMap": true,

    "pretty": true,

    // preserve jsdoc comments for intellisense
    "removeComments": false,

    // Enable module resolution without file extensions on relative paths for things like npm package imports.
    "moduleResolution": "Bundler",

    // Allow importing TypeScript files using their native extension (.ts(x)). -- astro rule
    // "allowImportingTsExtensions": true,

    // Enable JSON imports.
    "resolveJsonModule": true,

    // Enforce the usage of type-only imports when needed, which helps avoiding bundling issues.
    "verbatimModuleSyntax": true,

    // Ensure that each file can be transpiled without relying on other imports.
    // This is redundant with the previous option, however it ensures that it's on even if someone disable `verbatimModuleSyntax`
    "isolatedModules": true,

    // Astro can directly run TypeScript code with no transpilation required.
    // "noEmit": true,

    // Report an error when importing a file using a casing different from another import of the same file.
    "forceConsistentCasingInFileNames": true,

    // Properly support importing CJS modules in ESM
    "esModuleInterop": true,

    // Skip typechecking libraries and .d.ts files
    "skipLibCheck": true,

    // Allow JavaScript files to be imported (for example supports autocompletion in *.config.mjs files)
    "allowJs": true,

    // Allow JSX files (or files that are internally considered JSX such as Astro files) to be imported inside `.js` and `.ts` files.
    "jsx": "preserve",

    // "baseUrl": ".",

    // remember to specify these for astro+react apps and libs
    // "jsx": "react-jsx",
    // "jsxImportSource": "react",

    // explicitly declare essential strict rules for clarity

    "allowSyntheticDefaultImports": true,

    // enforce additional rigour for stricter type safety
    "strictFunctionTypes": true,
    "strictPropertyInitialization": false,

    // loosen some of astro's strictest rules for developer ergonomics...

    // a less restrictive eslint rule is used that allows unused locals if prefixed with an underscore
    "noUnusedLocals": false,

    // early returns are often used in dev and debug workflows -- set to `true` for maximum rigour
    "allowUnreachableCode": false,

    // Report an error when the value `undefined` is given to an optional property that doesn't specify `undefined` as a valid value.
    "exactOptionalPropertyTypes": true,
    // "exactOptionalPropertyTypes": false, // allow common JSX props patterns in React with typical type definitions

    // Report errors for fallthrough cases in switch statements
    "noFallthroughCasesInSwitch": true,
    // Force functions designed to override their parent class to be specified as `override`.
    "noImplicitOverride": true,
    // Force functions to specify that they can return `undefined` if a possible code path does not return a value.
    "noImplicitReturns": true,
    // Report an error when a parameter is declared but never used.
    "noUnusedParameters": true,
    // Force the usage of the indexed syntax to access fields declared using an index signature.
    "noUncheckedIndexedAccess": true,
    // Report an error for unused labels instead of just a warning.
    "allowUnusedLabels": false

    // "types": ["node", "vitest/globals"]
  },

  // include @total-typescript reset for global type enhancements
  "include": ["reset.d.ts"]

  // "exclude": []
  // "exclude": ["node_modules", "cdk.out", "tmp", "wip", "notes"]

  // friendly warning:
  // at present astro may have issues if you use multiple `extends` in a tsconfig (typescript v5+ feature)
}
